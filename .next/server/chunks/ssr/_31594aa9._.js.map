{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/lib/actions.ts"],"sourcesContent":["// app/lib/actions.ts\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport postgres from 'postgres';\nimport { z } from 'zod';\nimport { signIn } from '@/auth';\nimport { AuthError } from 'next-auth';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nexport type ActionState = {\n  errors?: {\n    customerId?: string[];\n    amount?: string[];\n    status?: string[];\n  };\n  message?: string | null;\n};\n\nconst InvoiceFormSchema = z.object({\n  customerId: z\n    .string({ required_error: 'Please select a customer.' })\n    .min(1, 'Please select a customer.'),\n  amount: z\n    .coerce.number({ invalid_type_error: 'Please enter a valid amount.' })\n    .gt(0, 'Amount must be greater than 0.'),\n  status: z.enum(['pending', 'paid'], {\n    required_error: 'Please select an invoice status.',\n  }),\n});\n\n/* -------------------- CREATE -------------------- */\nexport async function createInvoice(\n  _prevState: ActionState,\n  formData: FormData\n): Promise<ActionState> {\n  const parsed = InvoiceFormSchema.safeParse({\n    customerId: formData.get('customerId'),\n    amount: formData.get('amount'),\n    status: formData.get('status'),\n  });\n\n  if (!parsed.success) {\n    const { fieldErrors } = parsed.error.flatten();\n    return { errors: fieldErrors, message: 'Missing Fields. Failed to Create Invoice.' };\n  }\n\n  const { customerId, amount, status } = parsed.data;\n  const amountInCents = Math.round(amount * 100);\n  const date = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n\n  try {\n    await sql/* sql */`\n      INSERT INTO invoices (customer_id, amount_cents, status, date)\n      VALUES (${customerId}, ${amountInCents}, ${status}, ${date})\n    `;\n  } catch (e) {\n    return { message: 'Database Error: Failed to Create Invoice.' };\n  }\n\n  revalidatePath('/dashboard/invoices');\n  redirect('/dashboard/invoices');\n}\n\n/* -------------------- UPDATE -------------------- */\nexport async function updateInvoice(\n  id: string,\n  _prevState: ActionState,\n  formData: FormData\n): Promise<ActionState> {\n  const parsed = InvoiceFormSchema.safeParse({\n    customerId: formData.get('customerId'),\n    amount: formData.get('amount'),\n    status: formData.get('status'),\n  });\n\n  if (!parsed.success) {\n    const { fieldErrors } = parsed.error.flatten();\n    return { errors: fieldErrors, message: 'Missing Fields. Failed to Update Invoice.' };\n  }\n\n  const { customerId, amount, status } = parsed.data;\n  const amountInCents = Math.round(amount * 100);\n\n  try {\n    await sql/* sql */`\n      UPDATE invoices\n      SET customer_id = ${customerId},\n          amount_cents = ${amountInCents},\n          status = ${status}\n      WHERE id = ${id}\n    `;\n  } catch (e) {\n    return { message: 'Database Error: Failed to Update Invoice.' };\n  }\n\n  revalidatePath('/dashboard/invoices');\n  redirect('/dashboard/invoices');\n}\n\n/* -------------------- DELETE -------------------- */\nexport async function deleteInvoice(id: string): Promise<ActionState> {\n  try {\n    await sql/* sql */`DELETE FROM invoices WHERE id = ${id}`;\n    revalidatePath('/dashboard/invoices');\n    return { message: null };\n  } catch (e) {\n    return { message: 'Database Error: Failed to Delete Invoice.' };\n  }\n}\n\n\nexport async function authenticate(\n  prevState: string | undefined,\n  formData: FormData,\n) {\n  try {\n    await signIn('credentials', formData);\n  } catch (error) {\n    if (error instanceof AuthError) {\n      switch (error.type) {\n        case 'CredentialsSignin':\n          return 'Invalid credentials.';\n        default:\n          return 'Something went wrong.';\n      }\n    }\n    throw error;\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/.next-internal/server/app/dashboard/invoices/%5Bid%5D/edit/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '0009b2e3ab362b4e1fc08cb20006ea67d00981645e'} from 'ACTIONS_MODULE0'\nexport {updateInvoice as '709a348353276fd511654396bb9e2bdd0630423e2b'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/ui/invoices/edit-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/invoices/edit-form.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/invoices/edit-form.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/ui/invoices/edit-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/ui/invoices/edit-form.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/ui/invoices/edit-form.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/ui/invoices/breadcrumbs.tsx"],"sourcesContent":["import { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { lusitana } from '@/app/ui/fonts';\n\ninterface Breadcrumb {\n  label: string;\n  href: string;\n  active?: boolean;\n}\n\nexport default function Breadcrumbs({\n  breadcrumbs,\n}: {\n  breadcrumbs: Breadcrumb[];\n}) {\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"mb-6 block\">\n      <ol className={clsx(lusitana.className, 'flex text-xl md:text-2xl')}>\n        {breadcrumbs.map((breadcrumb, index) => (\n          <li\n            key={breadcrumb.href}\n            aria-current={breadcrumb.active}\n            className={clsx(\n              breadcrumb.active ? 'text-gray-900' : 'text-gray-500',\n            )}\n          >\n            <Link href={breadcrumb.href}>{breadcrumb.label}</Link>\n            {index < breadcrumbs.length - 1 ? (\n              <span className=\"mx-3 inline-block\">/</span>\n            ) : null}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;AAQe,SAAS,YAAY,EAClC,WAAW,EAGZ;IACC,qBACE,6WAAC;QAAI,cAAW;QAAa,WAAU;kBACrC,cAAA,6WAAC;YAAG,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE,mLAAA,CAAA,WAAQ,CAAC,SAAS,EAAE;sBACrC,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,6WAAC;oBAEC,gBAAc,WAAW,MAAM;oBAC/B,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EACZ,WAAW,MAAM,GAAG,kBAAkB;;sCAGxC,6WAAC,2RAAA,CAAA,UAAI;4BAAC,MAAM,WAAW,IAAI;sCAAG,WAAW,KAAK;;;;;;wBAC7C,QAAQ,YAAY,MAAM,GAAG,kBAC5B,6WAAC;4BAAK,WAAU;sCAAoB;;;;;mCAClC;;mBATC,WAAW,IAAI;;;;;;;;;;;;;;;AAehC","debugId":null}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number of pages is 7 or less,\n  // display all pages without any ellipsis.\n  if (totalPages <= 7) {\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\n  }\n\n  // If the current page is among the first 3 pages,\n  // show the first 3, an ellipsis, and the last 2 pages.\n  if (currentPage <= 3) {\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\n  }\n\n  // If the current page is among the last 3 pages,\n  // show the first 2, an ellipsis, and the last 3 pages.\n  if (currentPage >= totalPages - 2) {\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\n  }\n\n  // If the current page is somewhere in the middle,\n  // show the first page, an ellipsis, the current page and its neighbors,\n  // another ellipsis, and the last page.\n  return [\n    1,\n    '...',\n    currentPage - 1,\n    currentPage,\n    currentPage + 1,\n    '...',\n    totalPages,\n  ];\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// export async function fetchRevenue() {\n//   try {\n//     // Artificially delay a response for demo purposes.\n//     // Don't do this in production :)\n\n//     console.log('Fetching revenue data...');\n//     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n//    const rows = await sql/* sql */`\n//       SELECT month, amount_cents FROM revenue ORDER BY month\n//     `;\n\n//         console.log('Data fetch completed after 3 seconds.');\n\n\n//     // Se il tuo tipo Revenue è { month: string; revenue: number }\n//     return rows.map((r: any) => ({\n//       month: r.month,\n//       revenue: Number(r.amount_cents) / 100, // converte da centesimi\n//     }));\n//   }catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch revenue data.');\n//   }\n// }\n\n\n//MOCK\nexport async function fetchRevenue() {\n  return [\n    { month: '2025-07', revenue: 2500 },\n    { month: '2025-08', revenue: 3100 },\n    { month: '2025-09', revenue: 2800 },\n    { month: '2025-10', revenue: 3350 },\n  ];\n}\n\nexport async function fetchLatestInvoices() {\n  try {\n    // se le tabelle non ci sono, esci pulito\n    const reg = await sql/* sql */`\n      SELECT to_regclass('public.invoices') AS has_invoices,\n             to_regclass('public.customers') AS has_customers\n    `;\n    if (!reg?.[0]?.has_invoices || !reg?.[0]?.has_customers) return [];\n\n    const rows = await sql/* sql */`\n      SELECT\n        i.id,\n        COALESCE(i.amount, i.amount_cents) AS amount_cents,\n        c.name,\n        NULLIF(c.image_url,'') AS image_url,\n        NULLIF(c.email,'')     AS email\n      FROM public.invoices i\n      JOIN public.customers c ON i.customer_id = c.id\n      ORDER BY i.id DESC\n      LIMIT 5\n    `;\n\n    return rows.map((r: any) => ({\n      id: r.id,\n      name: r.name,\n      email: r.email ?? null,\n      image_url: r.image_url ?? null,\n      amount: formatCurrency(Number(r.amount_cents ?? 0)),\n    }));\n  } catch (e) {\n    console.error('fetchLatestInvoices error:', e);\n    // NON rilanciare: evita il crash della dashboard\n    return [];\n  }\n}\n\n\nexport async function fetchCardData() {\n  try {\n    const inv = await sql/* sql */`SELECT COUNT(*) AS count FROM public.invoices`;\n    const numberOfInvoices = Number(inv?.[0]?.count ?? 0);\n\n    const cust = await sql/* sql */`SELECT COUNT(*) AS count FROM public.customers`;\n    const numberOfCustomers = Number(cust?.[0]?.count ?? 0);\n\n    const stat = await sql/* sql */`\n      SELECT\n        COALESCE(SUM(CASE WHEN COALESCE(status,'paid')='paid'\n               THEN COALESCE(amount, amount_cents) ELSE 0 END),0) AS paid,\n        COALESCE(SUM(CASE WHEN COALESCE(status,'paid')='pending'\n               THEN COALESCE(amount, amount_cents) ELSE 0 END),0) AS pending\n      FROM public.invoices\n    `;\n    const totalPaidInvoices = formatCurrency(Number(stat?.[0]?.paid ?? 0));\n    const totalPendingInvoices = formatCurrency(Number(stat?.[0]?.pending ?? 0));\n\n    return { numberOfCustomers, numberOfInvoices, totalPaidInvoices, totalPendingInvoices };\n  } catch (error) {\n    console.error('fetchCardData error:', error);\n    return {\n      numberOfCustomers: 0,\n      numberOfInvoices: 0,\n      totalPaidInvoices: formatCurrency(0),\n      totalPendingInvoices: formatCurrency(0),\n    };\n  }\n}\n\n\nconst ITEMS_PER_PAGE = 6;\nexport async function fetchFilteredInvoices(query: string, currentPage: number) {\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n  try {\n  const rows = await sql/* sql */`\n  SELECT\n    i.id,\n    COALESCE(i.amount, i.amount_cents)                AS amount,\n    COALESCE(i.date::timestamptz, NOW()::timestamptz) AS date,\n    COALESCE(i.status,'paid')                         AS status,\n    c.name,\n    NULLIF(c.email,'')                                AS email,\n    NULLIF(c.image_url,'')                            AS image_url\n  FROM public.invoices i\n  JOIN public.customers c ON i.customer_id = c.id\n  WHERE\n    c.name ILIKE ${`%${query}%`} OR\n    c.email ILIKE ${`%${query}%`} OR\n    COALESCE(i.amount, i.amount_cents)::text ILIKE ${`%${query}%`} OR\n    COALESCE(i.date::timestamptz::text,'') ILIKE ${`%${query}%`} OR\n    COALESCE(i.status,'') ILIKE ${`%${query}%`}\n  ORDER BY COALESCE(i.date::timestamptz, NOW()::timestamptz) DESC\n  LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n`;\n\n    return rows as InvoicesTable[];\n  } catch (error) {\n    console.error('Database Error (fetchFilteredInvoices):', error);\n    throw new Error('Failed to fetch invoices.');\n  }\n}\n\nexport async function fetchInvoicesPages(query: string) {\n  try {\n   const data = await sql/* sql */`\n  SELECT COUNT(*) FROM (\n    SELECT 1\n    FROM public.invoices i\n    JOIN public.customers c ON i.customer_id = c.id\n    WHERE\n      c.name ILIKE ${`%${query}%`} OR\n      c.email ILIKE ${`%${query}%`} OR\n      COALESCE(i.amount, i.amount_cents)::text ILIKE ${`%${query}%`} OR\n      COALESCE(i.date::timestamptz::text,'') ILIKE ${`%${query}%`} OR\n      COALESCE(i.status,'') ILIKE ${`%${query}%`}\n  ) s\n`;\n\n    return Math.ceil(Number((data as any)[0].count) / ITEMS_PER_PAGE);\n  } catch (error) {\n    console.error('Database Error (fetchInvoicesPages):', error);\n    throw new Error('Failed to fetch total number of invoices.');\n  }\n}\n\n\nexport async function fetchInvoiceById(id: string) {\n  try {\n    const data = await sql<InvoiceForm[]>`\n      SELECT\n        invoices.id,\n        invoices.customer_id,\n        invoices.amount,\n        invoices.status\n      FROM invoices\n      WHERE invoices.id = ${id};\n    `;\n\n    const invoice = data.map((invoice) => ({\n      ...invoice,\n      // Convert amount from cents to dollars\n      amount: invoice.amount / 100,\n    }));\n\n    return invoice[0];\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoice.');\n  }\n}\n\nexport async function fetchCustomers() {\n  try {\n    const customers = await sql<CustomerField[]>`\n      SELECT\n        id,\n        name\n      FROM customers\n      ORDER BY name ASC\n    `;\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch all customers.');\n  }\n}\n\nexport async function fetchFilteredCustomers(query: string) {\n  try {\n    const data = await sql<CustomersTableType[]>`\n\t\tSELECT\n\t\t  customers.id,\n\t\t  customers.name,\n\t\t  customers.email,\n\t\t  customers.image_url,\n\t\t  COUNT(invoices.id) AS total_invoices,\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n\t\tFROM customers\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n\t\tWHERE\n\t\t  customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`}\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n\t\tORDER BY customers.name ASC\n\t  `;\n\n    const customers = data.map((customer) => ({\n      ...customer,\n      total_pending: formatCurrency(customer.total_pending),\n      total_paid: formatCurrency(customer.total_paid),\n    }));\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch customer table.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 626, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/dashboard/invoices/%5Bid%5D/edit/page.tsx"],"sourcesContent":["import Form from '@/app/ui/invoices/edit-form';\nimport Breadcrumbs from '@/app/ui/invoices/breadcrumbs';\nimport { fetchInvoiceById, fetchCustomers } from '@/app/lib/data';\n\n \nexport default async function Page(props: { params: Promise<{ id: string }> }) {\n  const params = await props.params;\n  const id = params.id;\n  const [invoice, customers] = await Promise.all([\n    fetchInvoiceById(id),\n    fetchCustomers(),\n  ]);\n  return (\n    <main>\n      <Breadcrumbs\n        breadcrumbs={[\n          { label: 'Invoices', href: '/dashboard/invoices' },\n          {\n            label: 'Edit Invoice',\n            href: `/dashboard/invoices/${id}/edit`,\n            active: true,\n          },\n        ]}\n      />\n      <Form invoice={invoice} customers={customers} />\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAGe,eAAe,KAAK,KAA0C;IAC3E,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,MAAM,KAAK,OAAO,EAAE;IACpB,MAAM,CAAC,SAAS,UAAU,GAAG,MAAM,QAAQ,GAAG,CAAC;QAC7C,CAAA,GAAA,kHAAA,CAAA,mBAAgB,AAAD,EAAE;QACjB,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD;KACd;IACD,qBACE,6WAAC;;0BACC,6WAAC,qIAAA,CAAA,UAAW;gBACV,aAAa;oBACX;wBAAE,OAAO;wBAAY,MAAM;oBAAsB;oBACjD;wBACE,OAAO;wBACP,MAAM,CAAC,oBAAoB,EAAE,GAAG,KAAK,CAAC;wBACtC,QAAQ;oBACV;iBACD;;;;;;0BAEH,6WAAC,sIAAA,CAAA,UAAI;gBAAC,SAAS;gBAAS,WAAW;;;;;;;;;;;;AAGzC","debugId":null}}]
}