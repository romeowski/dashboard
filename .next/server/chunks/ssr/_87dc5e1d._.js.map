{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/.next-internal/server/app/dashboard/%28overview%29/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '0009b2e3ab362b4e1fc08cb20006ea67d00981645e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number of pages is 7 or less,\n  // display all pages without any ellipsis.\n  if (totalPages <= 7) {\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\n  }\n\n  // If the current page is among the first 3 pages,\n  // show the first 3, an ellipsis, and the last 2 pages.\n  if (currentPage <= 3) {\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\n  }\n\n  // If the current page is among the last 3 pages,\n  // show the first 2, an ellipsis, and the last 3 pages.\n  if (currentPage >= totalPages - 2) {\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\n  }\n\n  // If the current page is somewhere in the middle,\n  // show the first page, an ellipsis, the current page and its neighbors,\n  // another ellipsis, and the last page.\n  return [\n    1,\n    '...',\n    currentPage - 1,\n    currentPage,\n    currentPage + 1,\n    '...',\n    totalPages,\n  ];\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/ui/dashboard/revenue-chart.tsx"],"sourcesContent":["// This component is representational only.\n// For data visualization UI, check out:\n// https://www.tremor.so/\n// https://www.chartjs.org/\n// https://airbnb.io/visx/\n\n// app/ui/dashboard/revenue-chart.tsx\nimport { generateYAxis } from '@/app/lib/utils';\nimport { CalendarIcon } from '@heroicons/react/24/outline';\nimport { lusitana } from '@/app/ui/fonts';\nimport type { Revenue } from '@/app/lib/definitions';\n\nexport default async function RevenueChart({\n  revenue = [],             // default: array vuoto per evitare crash se il parent non passa nulla\n}: {\n  revenue?: Revenue[];       // prop opzionale così <RevenueChart /> non esplode\n}) {\n  const chartHeight = 350;\n\n  // Se non ci sono dati, mostra placeholder e basta\n  if (!revenue || revenue.length === 0) {\n    return <p className=\"mt-4 text-gray-400\">No data available.</p>;\n  }\n\n  // Calcola le etichette SOLO dopo aver validato i dati\n  const { yAxisLabels, topLabel } = generateYAxis(revenue);\n  const safeTop = topLabel || 1;\n\n  return (\n    <div className=\"w-full md:col-span-4\">\n      <h2 className={`${lusitana.className} mb-4 text-xl md:text-2xl`}>\n        Recent Revenue\n      </h2>\n\n      <div className=\"rounded-xl bg-gray-50 p-4\">\n        <div className=\"sm:grid-cols-13 mt-0 grid grid-cols-12 items-end gap-2 rounded-md bg-white p-4 md:gap-4\">\n          <div\n            className=\"mb-6 hidden flex-col justify-between text-sm text-gray-400 sm:flex\"\n            style={{ height: `${chartHeight}px` }}\n          >\n            {yAxisLabels.map((label) => (\n              <p key={label}>{label}</p>\n            ))}\n          </div>\n\n          {revenue.map((m) => (\n            <div key={m.month} className=\"flex flex-col items-center gap-2\">\n              <div\n                className=\"w-full rounded-md bg-blue-300\"\n                style={{ height: `${(chartHeight / safeTop) * m.revenue}px` }}\n              />\n              <p className=\"-rotate-90 text-sm text-gray-400 sm:rotate-0\">\n                {m.month}\n              </p>\n            </div>\n          ))}\n        </div>\n        <div className=\"flex items-center pb-2 pt-6\">\n          <CalendarIcon className=\"h-5 w-5 text-gray-500\" />\n          <h3 className=\"ml-2 text-sm text-gray-500\">Last 12 months</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,wCAAwC;AACxC,yBAAyB;AACzB,2BAA2B;AAC3B,0BAA0B;AAE1B,qCAAqC;;;;;AACrC;AACA;AACA;AAAA;;;;;AAGe,eAAe,aAAa,EACzC,UAAU,EAAE,EAGb;IACC,MAAM,cAAc;IAEpB,kDAAkD;IAClD,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;QACpC,qBAAO,6WAAC;YAAE,WAAU;sBAAqB;;;;;;IAC3C;IAEA,sDAAsD;IACtD,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,mHAAA,CAAA,gBAAa,AAAD,EAAE;IAChD,MAAM,UAAU,YAAY;IAE5B,qBACE,6WAAC;QAAI,WAAU;;0BACb,6WAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BAIjE,6WAAC;gBAAI,WAAU;;kCACb,6WAAC;wBAAI,WAAU;;0CACb,6WAAC;gCACC,WAAU;gCACV,OAAO;oCAAE,QAAQ,GAAG,YAAY,EAAE,CAAC;gCAAC;0CAEnC,YAAY,GAAG,CAAC,CAAC,sBAChB,6WAAC;kDAAe;uCAAR;;;;;;;;;;4BAIX,QAAQ,GAAG,CAAC,CAAC,kBACZ,6WAAC;oCAAkB,WAAU;;sDAC3B,6WAAC;4CACC,WAAU;4CACV,OAAO;gDAAE,QAAQ,GAAG,AAAC,cAAc,UAAW,EAAE,OAAO,CAAC,EAAE,CAAC;4CAAC;;;;;;sDAE9D,6WAAC;4CAAE,WAAU;sDACV,EAAE,KAAK;;;;;;;mCANF,EAAE,KAAK;;;;;;;;;;;kCAWrB,6WAAC;wBAAI,WAAU;;0CACb,6WAAC,8SAAA,CAAA,eAAY;gCAAC,WAAU;;;;;;0CACxB,6WAAC;gCAAG,WAAU;0CAA6B;;;;;;;;;;;;;;;;;;;;;;;;AAKrD","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// export async function fetchRevenue() {\n//   try {\n//     // Artificially delay a response for demo purposes.\n//     // Don't do this in production :)\n\n//     console.log('Fetching revenue data...');\n//     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n//    const rows = await sql/* sql */`\n//       SELECT month, amount_cents FROM revenue ORDER BY month\n//     `;\n\n//         console.log('Data fetch completed after 3 seconds.');\n\n\n//     // Se il tuo tipo Revenue è { month: string; revenue: number }\n//     return rows.map((r: any) => ({\n//       month: r.month,\n//       revenue: Number(r.amount_cents) / 100, // converte da centesimi\n//     }));\n//   }catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch revenue data.');\n//   }\n// }\n\n\n//MOCK\nexport async function fetchRevenue() {\n  return [\n    { month: '2025-07', revenue: 2500 },\n    { month: '2025-08', revenue: 3100 },\n    { month: '2025-09', revenue: 2800 },\n    { month: '2025-10', revenue: 3350 },\n  ];\n}\n\nexport async function fetchLatestInvoices() {\n  try {\n    // se le tabelle non ci sono, esci pulito\n    const reg = await sql/* sql */`\n      SELECT to_regclass('public.invoices') AS has_invoices,\n             to_regclass('public.customers') AS has_customers\n    `;\n    if (!reg?.[0]?.has_invoices || !reg?.[0]?.has_customers) return [];\n\n    const rows = await sql/* sql */`\n      SELECT\n        i.id,\n        COALESCE(i.amount, i.amount_cents) AS amount_cents,\n        c.name,\n        NULLIF(c.image_url,'') AS image_url,\n        NULLIF(c.email,'')     AS email\n      FROM public.invoices i\n      JOIN public.customers c ON i.customer_id = c.id\n      ORDER BY i.id DESC\n      LIMIT 5\n    `;\n\n    return rows.map((r: any) => ({\n      id: r.id,\n      name: r.name,\n      email: r.email ?? null,\n      image_url: r.image_url ?? null,\n      amount: formatCurrency(Number(r.amount_cents ?? 0)),\n    }));\n  } catch (e) {\n    console.error('fetchLatestInvoices error:', e);\n    // NON rilanciare: evita il crash della dashboard\n    return [];\n  }\n}\n\n\nexport async function fetchCardData() {\n  try {\n    const inv = await sql/* sql */`SELECT COUNT(*) AS count FROM public.invoices`;\n    const numberOfInvoices = Number(inv?.[0]?.count ?? 0);\n\n    const cust = await sql/* sql */`SELECT COUNT(*) AS count FROM public.customers`;\n    const numberOfCustomers = Number(cust?.[0]?.count ?? 0);\n\n    const stat = await sql/* sql */`\n      SELECT\n        COALESCE(SUM(CASE WHEN COALESCE(status,'paid')='paid'\n               THEN COALESCE(amount, amount_cents) ELSE 0 END),0) AS paid,\n        COALESCE(SUM(CASE WHEN COALESCE(status,'paid')='pending'\n               THEN COALESCE(amount, amount_cents) ELSE 0 END),0) AS pending\n      FROM public.invoices\n    `;\n    const totalPaidInvoices = formatCurrency(Number(stat?.[0]?.paid ?? 0));\n    const totalPendingInvoices = formatCurrency(Number(stat?.[0]?.pending ?? 0));\n\n    return { numberOfCustomers, numberOfInvoices, totalPaidInvoices, totalPendingInvoices };\n  } catch (error) {\n    console.error('fetchCardData error:', error);\n    return {\n      numberOfCustomers: 0,\n      numberOfInvoices: 0,\n      totalPaidInvoices: formatCurrency(0),\n      totalPendingInvoices: formatCurrency(0),\n    };\n  }\n}\n\n\nconst ITEMS_PER_PAGE = 6;\nexport async function fetchFilteredInvoices(query: string, currentPage: number) {\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n  try {\n  const rows = await sql/* sql */`\n  SELECT\n    i.id,\n    COALESCE(i.amount, i.amount_cents)                AS amount,\n    COALESCE(i.date::timestamptz, NOW()::timestamptz) AS date,\n    COALESCE(i.status,'paid')                         AS status,\n    c.name,\n    NULLIF(c.email,'')                                AS email,\n    NULLIF(c.image_url,'')                            AS image_url\n  FROM public.invoices i\n  JOIN public.customers c ON i.customer_id = c.id\n  WHERE\n    c.name ILIKE ${`%${query}%`} OR\n    c.email ILIKE ${`%${query}%`} OR\n    COALESCE(i.amount, i.amount_cents)::text ILIKE ${`%${query}%`} OR\n    COALESCE(i.date::timestamptz::text,'') ILIKE ${`%${query}%`} OR\n    COALESCE(i.status,'') ILIKE ${`%${query}%`}\n  ORDER BY COALESCE(i.date::timestamptz, NOW()::timestamptz) DESC\n  LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n`;\n\n    return rows as InvoicesTable[];\n  } catch (error) {\n    console.error('Database Error (fetchFilteredInvoices):', error);\n    throw new Error('Failed to fetch invoices.');\n  }\n}\n\nexport async function fetchInvoicesPages(query: string) {\n  try {\n   const data = await sql/* sql */`\n  SELECT COUNT(*) FROM (\n    SELECT 1\n    FROM public.invoices i\n    JOIN public.customers c ON i.customer_id = c.id\n    WHERE\n      c.name ILIKE ${`%${query}%`} OR\n      c.email ILIKE ${`%${query}%`} OR\n      COALESCE(i.amount, i.amount_cents)::text ILIKE ${`%${query}%`} OR\n      COALESCE(i.date::timestamptz::text,'') ILIKE ${`%${query}%`} OR\n      COALESCE(i.status,'') ILIKE ${`%${query}%`}\n  ) s\n`;\n\n    return Math.ceil(Number((data as any)[0].count) / ITEMS_PER_PAGE);\n  } catch (error) {\n    console.error('Database Error (fetchInvoicesPages):', error);\n    throw new Error('Failed to fetch total number of invoices.');\n  }\n}\n\n\nexport async function fetchInvoiceById(id: string) {\n  try {\n    const data = await sql<InvoiceForm[]>`\n      SELECT\n        invoices.id,\n        invoices.customer_id,\n        invoices.amount,\n        invoices.status\n      FROM invoices\n      WHERE invoices.id = ${id};\n    `;\n\n    const invoice = data.map((invoice) => ({\n      ...invoice,\n      // Convert amount from cents to dollars\n      amount: invoice.amount / 100,\n    }));\n\n    return invoice[0];\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoice.');\n  }\n}\n\nexport async function fetchCustomers() {\n  try {\n    const customers = await sql<CustomerField[]>`\n      SELECT\n        id,\n        name\n      FROM customers\n      ORDER BY name ASC\n    `;\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch all customers.');\n  }\n}\n\nexport async function fetchFilteredCustomers(query: string) {\n  try {\n    const data = await sql<CustomersTableType[]>`\n\t\tSELECT\n\t\t  customers.id,\n\t\t  customers.name,\n\t\t  customers.email,\n\t\t  customers.image_url,\n\t\t  COUNT(invoices.id) AS total_invoices,\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n\t\tFROM customers\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n\t\tWHERE\n\t\t  customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`}\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n\t\tORDER BY customers.name ASC\n\t  `;\n\n    const customers = data.map((customer) => ({\n      ...customer,\n      total_pending: formatCurrency(customer.total_pending),\n      total_paid: formatCurrency(customer.total_paid),\n    }));\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch customer table.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/ui/dashboard/latest-invoices.tsx"],"sourcesContent":["// app/ui/dashboard/latest-invoices.tsx\nimport { ArrowPathIcon } from '@heroicons/react/24/outline';\nimport clsx from 'clsx';\nimport Image from 'next/image';\nimport { lusitana } from '@/app/ui/fonts';\nimport { fetchLatestInvoices } from '@/app/lib/data';\n\nfunction initials(name: string) {\n  return name\n    .split(' ')\n    .map(n => n[0])\n    .filter(Boolean)\n    .slice(0, 2)\n    .join('')\n    .toUpperCase();\n}\n\nexport default async function LatestInvoices() { // Remove props\n  const latestInvoices = await fetchLatestInvoices();\n \n  return (\n    <div className=\"flex w-full flex-col md:col-span-4\">\n      <h2 className={`${lusitana.className} mb-4 text-xl md:text-2xl`}>Latest Invoices</h2>\n      <div className=\"flex grow flex-col justify-between rounded-xl bg-gray-50 p-4\">\n        <div className=\"bg-white px-6\">\n          {latestInvoices.map((invoice, i) => {\n            const hasImg = !!invoice.image_url && invoice.image_url.trim() !== '';\n            return (\n              <div\n                key={invoice.id}\n                className={clsx('flex flex-row items-center justify-between py-4', {\n                  'border-t': i !== 0,\n                })}\n              >\n                <div className=\"flex items-center\">\n                  {hasImg ? (\n                    <Image\n                      src={invoice.image_url!}\n                      alt={`${invoice.name}'s profile picture`}\n                      className=\"mr-4 rounded-full\"\n                      width={32}\n                      height={32}\n                    />\n                  ) : (\n                    <div className=\"mr-4 flex h-8 w-8 items-center justify-center rounded-full bg-gray-200 text-[10px] font-semibold text-gray-600\">\n                      {initials(invoice.name)}\n                    </div>\n                  )}\n                  <div className=\"min-w-0\">\n                    <p className=\"truncate text-sm font-semibold md:text-base\">\n                      {invoice.name}\n                    </p>\n                    {invoice.email ? (\n                      <p className=\"hidden text-sm text-gray-500 sm:block\">{invoice.email}</p>\n                    ) : null}\n                  </div>\n                </div>\n                <p className={`${lusitana.className} truncate text-sm font-medium md:text-base`}>\n                  {invoice.amount}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"flex items-center pb-2 pt-6\">\n          <ArrowPathIcon className=\"h-5 w-5 text-gray-500\" />\n          <h3 className=\"ml-2 text-sm text-gray-500 \">Updated just now</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA,uCAAuC;;;;;AACvC;AACA;AACA;AACA;AAAA;AACA;;;;;;;AAEA,SAAS,SAAS,IAAY;IAC5B,OAAO,KACJ,KAAK,CAAC,KACN,GAAG,CAAC,CAAA,IAAK,CAAC,CAAC,EAAE,EACb,MAAM,CAAC,SACP,KAAK,CAAC,GAAG,GACT,IAAI,CAAC,IACL,WAAW;AAChB;AAEe,eAAe;IAC5B,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,sBAAmB,AAAD;IAE/C,qBACE,6WAAC;QAAI,WAAU;;0BACb,6WAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BACjE,6WAAC;gBAAI,WAAU;;kCACb,6WAAC;wBAAI,WAAU;kCACZ,eAAe,GAAG,CAAC,CAAC,SAAS;4BAC5B,MAAM,SAAS,CAAC,CAAC,QAAQ,SAAS,IAAI,QAAQ,SAAS,CAAC,IAAI,OAAO;4BACnE,qBACE,6WAAC;gCAEC,WAAW,CAAA,GAAA,sLAAA,CAAA,UAAI,AAAD,EAAE,mDAAmD;oCACjE,YAAY,MAAM;gCACpB;;kDAEA,6WAAC;wCAAI,WAAU;;4CACZ,uBACC,6WAAC,4PAAA,CAAA,UAAK;gDACJ,KAAK,QAAQ,SAAS;gDACtB,KAAK,GAAG,QAAQ,IAAI,CAAC,kBAAkB,CAAC;gDACxC,WAAU;gDACV,OAAO;gDACP,QAAQ;;;;;qEAGV,6WAAC;gDAAI,WAAU;0DACZ,SAAS,QAAQ,IAAI;;;;;;0DAG1B,6WAAC;gDAAI,WAAU;;kEACb,6WAAC;wDAAE,WAAU;kEACV,QAAQ,IAAI;;;;;;oDAEd,QAAQ,KAAK,iBACZ,6WAAC;wDAAE,WAAU;kEAAyC,QAAQ,KAAK;;;;;+DACjE;;;;;;;;;;;;;kDAGR,6WAAC;wCAAE,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,0CAA0C,CAAC;kDAC5E,QAAQ,MAAM;;;;;;;+BA7BZ,QAAQ,EAAE;;;;;wBAiCrB;;;;;;kCAEF,6WAAC;wBAAI,WAAU;;0CACb,6WAAC,gTAAA,CAAA,gBAAa;gCAAC,WAAU;;;;;;0CACzB,6WAAC;gCAAG,WAAU;0CAA8B;;;;;;;;;;;;;;;;;;;;;;;;AAKtD","debugId":null}},
    {"offset": {"line": 682, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/ui/dashboard/cards.tsx"],"sourcesContent":["import {\n  BanknotesIcon,\n  ClockIcon,\n  UserGroupIcon,\n  InboxIcon,\n} from '@heroicons/react/24/outline';\nimport { lusitana } from '@/app/ui/fonts';\nimport { fetchCardData } from '@/app/lib/data';\n\n\nconst iconMap = {\n  collected: BanknotesIcon,\n  customers: UserGroupIcon,\n  pending: ClockIcon,\n  invoices: InboxIcon,\n};\n\nexport default async function CardWrapper() {\n   const {\n    numberOfInvoices,\n    numberOfCustomers,\n    totalPaidInvoices,\n    totalPendingInvoices,\n  } = await fetchCardData();\n\n  return (\n    <>\n\n      <Card title=\"Collected\" value={totalPaidInvoices} type=\"collected\" />\n      <Card title=\"Pending\" value={totalPendingInvoices} type=\"pending\" />\n      <Card title=\"Total Invoices\" value={numberOfInvoices} type=\"invoices\" />\n      <Card\n        title=\"Total Customers\"\n        value={numberOfCustomers}\n        type=\"customers\"\n      /> \n    </>\n  );\n}\n\nexport function Card({\n  title,\n  value,\n  type,\n}: {\n  title: string;\n  value: number | string;\n  type: 'invoices' | 'customers' | 'pending' | 'collected';\n}) {\n  const Icon = iconMap[type];\n\n  return (\n    <div className=\"rounded-xl bg-gray-50 p-2 shadow-sm\">\n      <div className=\"flex p-4\">\n        {Icon ? <Icon className=\"h-5 w-5 text-gray-700\" /> : null}\n        <h3 className=\"ml-2 text-sm font-medium\">{title}</h3>\n      </div>\n      <p\n        className={`${lusitana.className}\n          truncate rounded-xl bg-white px-4 py-8 text-center text-2xl`}\n      >\n        {value}\n      </p>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;;;;;AAGA,MAAM,UAAU;IACd,WAAW,gTAAA,CAAA,gBAAa;IACxB,WAAW,gTAAA,CAAA,gBAAa;IACxB,SAAS,wSAAA,CAAA,YAAS;IAClB,UAAU,wSAAA,CAAA,YAAS;AACrB;AAEe,eAAe;IAC3B,MAAM,EACL,gBAAgB,EAChB,iBAAiB,EACjB,iBAAiB,EACjB,oBAAoB,EACrB,GAAG,MAAM,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD;IAEtB,qBACE;;0BAEE,6WAAC;gBAAK,OAAM;gBAAY,OAAO;gBAAmB,MAAK;;;;;;0BACvD,6WAAC;gBAAK,OAAM;gBAAU,OAAO;gBAAsB,MAAK;;;;;;0BACxD,6WAAC;gBAAK,OAAM;gBAAiB,OAAO;gBAAkB,MAAK;;;;;;0BAC3D,6WAAC;gBACC,OAAM;gBACN,OAAO;gBACP,MAAK;;;;;;;;AAIb;AAEO,SAAS,KAAK,EACnB,KAAK,EACL,KAAK,EACL,IAAI,EAKL;IACC,MAAM,OAAO,OAAO,CAAC,KAAK;IAE1B,qBACE,6WAAC;QAAI,WAAU;;0BACb,6WAAC;gBAAI,WAAU;;oBACZ,qBAAO,6WAAC;wBAAK,WAAU;;;;;+BAA6B;kCACrD,6WAAC;wBAAG,WAAU;kCAA4B;;;;;;;;;;;;0BAE5C,6WAAC;gBACC,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC;qEAC4B,CAAC;0BAE7D;;;;;;;;;;;;AAIT","debugId":null}},
    {"offset": {"line": 798, "column": 0}, "map": {"version":3,"sources":["file:///Users/a.romeo/dashboard/dashboard/app/dashboard/%28overview%29/page.tsx"],"sourcesContent":["import { Card } from '@/app/ui/dashboard/cards';\nimport RevenueChart from '@/app/ui/dashboard/revenue-chart';\nimport LatestInvoices from '@/app/ui/dashboard/latest-invoices';\nimport { lusitana } from '@/app/ui/fonts';\nimport { fetchCardData } from '@/app/lib/data'; // Remove fetchLatestInvoices\nimport { Suspense } from 'react';\nimport CardWrapper from '@/app/ui/dashboard/cards';\n\nimport {\n  RevenueChartSkeleton,\n  LatestInvoicesSkeleton,\n  CardsSkeleton,\n} from '@/app/ui/skeletons';\n \nexport default async function Page() {\n  // Remove `const latestInvoices = await fetchLatestInvoices()`\n  const {\n    numberOfInvoices,\n    numberOfCustomers,\n    totalPaidInvoices,\n    totalPendingInvoices,\n  } = await fetchCardData();\n \n  return (\n    <main>\n      <h1 className={`${lusitana.className} mb-4 text-xl md:text-2xl`}>\n        Dashboard\n      </h1>\n      <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n       <Suspense fallback={<CardsSkeleton />}>\n          <CardWrapper />\n        </Suspense>\n      </div>\n      <div className=\"mt-6 grid grid-cols-1 gap-6 md:grid-cols-4 lg:grid-cols-8\">\n        <Suspense fallback={<RevenueChartSkeleton />}>\n          <RevenueChart />\n        </Suspense>\n        <Suspense fallback={<LatestInvoicesSkeleton />}>\n          <LatestInvoices />\n        </Suspense>\n      </div>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAAA;AACA,sMAAgD,6BAA6B;AAC7E;AACA;AAEA;;;;;;;;;AAMe,eAAe;IAC5B,8DAA8D;IAC9D,MAAM,EACJ,gBAAgB,EAChB,iBAAiB,EACjB,iBAAiB,EACjB,oBAAoB,EACrB,GAAG,MAAM,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD;IAEtB,qBACE,6WAAC;;0BACC,6WAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BAGjE,6WAAC;gBAAI,WAAU;0BACd,cAAA,6WAAC,oUAAA,CAAA,WAAQ;oBAAC,wBAAU,6WAAC,uHAAA,CAAA,gBAAa;;;;;8BAC/B,cAAA,6WAAC,gIAAA,CAAA,UAAW;;;;;;;;;;;;;;;0BAGhB,6WAAC;gBAAI,WAAU;;kCACb,6WAAC,oUAAA,CAAA,WAAQ;wBAAC,wBAAU,6WAAC,uHAAA,CAAA,uBAAoB;;;;;kCACvC,cAAA,6WAAC,2IAAA,CAAA,UAAY;;;;;;;;;;kCAEf,6WAAC,oUAAA,CAAA,WAAQ;wBAAC,wBAAU,6WAAC,uHAAA,CAAA,yBAAsB;;;;;kCACzC,cAAA,6WAAC,6IAAA,CAAA,UAAc;;;;;;;;;;;;;;;;;;;;;;AAKzB","debugId":null}}]
}